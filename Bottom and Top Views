#include<bits/stdc++.h>
using namespace std;

class Node
{
public:
    int data;
    Node* left,*right;

    Node (int data)
    {
        this->data = data;
        left=right=NULL;
    }
};

Node* insert(Node* root,int data)
{
    if(root == NULL)
    {
        return new Node(data);
    }
    else
    {
        Node* cur;

        if(data <= root->data)
        {
            cur = insert(root->left, data);
            root->left = cur;
        }
        else
        {
            cur = insert(root->right, data);
            root->right = cur;
        }
    }
}

void topView(Node * root)
{
    map<int,int> m;
    queue<pair<Node* , int> > q;

    if(!root)return;
    q.push({root,0});

    while(!q.empty())
    {
        Node*t = q.front().first;
        int h = q.front().second;
        q.pop();
        //m[h] = t->data;                                    //Bottom view
        if(!m[h])m[h] = t->data;                            //Top view
        if(t->left)q.push({t->left,h-1});
        if(t->right)q.push({t->right,h+1});
    }

    for(auto x:m)
        cout<<x.second->data<<" ";

}

void level(Node* root)
{
    queue<Node*>q;
    if(!root)return;
    q.push(root);

    while(!q.empty())
    {
        Node* t = q.front();
        if(t->left)q.push(t->left);
        if(t->right)q.push(t->right);
        q.pop();
        cout<<t->data<<" ";
    }
}

void leftView(Node* root)
{
    queue<Node* > q;
    if(!root)return ;

    q.push(root);

    while(!q.empty())
    {
        int sz = q.size();

        while(sz--)
        {
            Node* t = q.front();
            if(t->left)q.push(t->left);
            if(t->right)q.push(t->right);

        }
         cout<<t->data<<" ";
    }

}

int main()
{
    Node* root = NULL;
    int t,data;
    cin>>t;

    while(t-- > 0)
    {
        cin>>data;
        root = insert(root,data);
    }
    level(root);
return 0;
}
